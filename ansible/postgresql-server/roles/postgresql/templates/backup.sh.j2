#!/bin/bash
# PostgreSQL Backup Script
# Generated by Ansible - DO NOT EDIT MANUALLY

set -euo pipefail

BACKUP_DIR="{{ postgresql_backup_dir }}"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
DATABASES=({{ postgresql_databases | map(attribute='name') | join(' ') }})

# Create backup directory if it doesn't exist
mkdir -p "${BACKUP_DIR}"

# Backup each database
for DB in "${DATABASES[@]}"; do
    BACKUP_FILE="${BACKUP_DIR}/${DB}_${TIMESTAMP}.sql.gz"

    echo "$(date '+%Y-%m-%d %H:%M:%S') - Backing up database: ${DB}"

    # Create backup
    sudo -u postgres pg_dump "${DB}" | gzip > "${BACKUP_FILE}"

    # Set permissions
    chmod 640 "${BACKUP_FILE}"
    chown postgres:postgres "${BACKUP_FILE}"

    echo "$(date '+%Y-%m-%d %H:%M:%S') - Backup completed: ${BACKUP_FILE}"

{% if postgresql_backup_s3_enabled %}
    # Upload to S3
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Uploading to S3..."
    aws s3 cp "${BACKUP_FILE}" "s3://{{ postgresql_backup_s3_bucket }}/postgresql/${DB}/" \
        --region "{{ postgresql_backup_s3_region }}" \
        --storage-class STANDARD_IA

    if [ $? -eq 0 ]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - S3 upload completed"
    else
        echo "$(date '+%Y-%m-%d %H:%M:%S') - ERROR: S3 upload failed" >&2
    fi
{% endif %}
done

echo "$(date '+%Y-%m-%d %H:%M:%S') - All backups completed"
